<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Millerchx碎碎念</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="hhttp://yoursite.com/"/>
  <updated>2018-05-22T16:52:45.515Z</updated>
  <id>hhttp://yoursite.com/</id>
  
  <author>
    <name>Roy Miller</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>stack and queue</title>
    <link href="hhttp://yoursite.com/2018/05/15/stack-and-queue/"/>
    <id>hhttp://yoursite.com/2018/05/15/stack-and-queue/</id>
    <published>2018-05-15T09:41:57.000Z</published>
    <updated>2018-05-22T16:52:45.515Z</updated>
    
    <content type="html"><![CDATA[<h1>栈和队列</h1><h2>栈和队列的概念</h2><ol><br>    <li>栈是一种只能在一端进行插入或删除操作的的线性表。<br><br>        <ol><br>            <li>分为顺序栈和链式栈<br><br>                <ol><br>                    <li>主要特点是先进后出</li><br>                </ol></li><br>        </ol></li><br>    <li>队列是一种受限的线性表<br><br>        <ol><br>            <li>可进行插入的一端成为队头，可进行插入的一端称为队尾<br><br>                <ol><br>                    <li>先进先出</li><br>                    <li>分为顺序队和链队两种</li><br>                </ol></li><br>        </ol></li><br></ol><h2>栈和队列的存储结构、算法与应用</h2><h3>结构体定义</h3><ol><br>    <li>顺序栈的定义</li><br></ol><pre><code>typedef struct{    int data[maxSize];    int top;}SqStack;</code></pre><ol><br>    <li>链栈的定义</li><br></ol><pre><code>typedef struct LNode{    int data;    struct LNode *next; }LNode;</code></pre><ol><br>    <li>顺序队列定义</li><br></ol><pre><code>typedef struct{    int data[maxSize];    int front;    int  rear;}SqQueue;</code></pre><ol><br>    <li>链队定义<br><br>        <ol><br>            <li>队结点类型定义</li><br>        </ol></li><br></ol><pre><code>typedef struct{    QNode *front;    QNode *rear;}LiQueue;</code></pre><ol><br>    <li>链队类型定义</li><br></ol><pre><code>typedef struct{    QNode *front;      QNode *rear;}LiQueue;</code></pre><h3>顺序栈</h3><ol><br>    <li>几个状态<br><br>        <ol><br>            <li>栈空状态：<code>st.top == -1</code></li><br>            <li>栈满状态：<code>st.top == maxSize - 1</code>, 因为数组下标从0号开始。</li><br>            <li>非法状态：栈满就是一种继续入栈就会<strong>上溢</strong>的状态，对应的栈<strong>下溢</strong>就是栈空的时候继续出栈所造成的结果。</li><br>        </ol></li><br>    <li>两个操作<br><br>        <ol><br>            <li>元素x进栈操作：<code>++(st.top); st.data[st.top] = x</code> </li><br>            <li>元素x出栈操作：<code>x = st.data[st.top], –(st.top)</code></li><br>        </ol></li><br>    <li>初始化栈的代码<br><br>        <p>初始化一个栈，只需要将栈顶指针置为-1即可。</p><br><br>        <pre><code>void initStack(SqStack st){<br>            st.top = -1;<br>        }<br>        </code></pre></li><br>    <li>判断栈空代码<br><br>        <p>栈空的时候返回1，否则返回0。</p><br><br>        <pre><code>int isEmpty(SqStack st){<br>            if(st.top == -1)<br>                return 1;<br>            else<br>                return 0;<br>        }<br>        </code></pre></li><br>    <li>进栈代码<br><br>        <pre><code>int push(SqStack &amp;st, int x){<br>            if(st.top == maxSize - 1)<br>                return 0;<br>            ++(st.top);<br>            st.data[st.top] = x;<br>                return 1;<br>        }<br>        </code></pre></li><br>    <li>出栈代码<br><br>        <pre><code>int pop(SqStack &amp;st, int &amp;x){<br>            if(st.top == -1)<br>                return 0;<br>            x = st.data[st.top];<br>            –(st.top);<br>            return 1;<br>        }<br>        </code></pre></li><br></ol><blockquote><br><p>在考试中，栈常常作为一个工具来解决其他问题，因此一般情况下，栈的定义及操作可以写的很简单，不必调用以上函数，上述函数只作为标准操作来参考，使用价值并不高。</p><br></blockquote><ol><br>    <li>考题中比较实用的栈的操作的写法如下：<br><br>        <pre><code>int stack[maxSize];<br>        int top = -1;<br>        </code></pre><br><br>        <p>进栈</p><br><br>        <pre><code>stack[++top] = x;<br>        </code></pre><br><br>        <p>出栈</p><br><br>        <pre><code>x = stack[top–];<br>        </code></pre></li><br></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;栈和队列&lt;/h1&gt;

&lt;h2&gt;栈和队列的概念&lt;/h2&gt;

&lt;ol&gt;&lt;br&gt;    &lt;li&gt;栈是一种只能在一端进行插入或删除操作的的线性表。&lt;br&gt;&lt;br&gt;        &lt;ol&gt;&lt;br&gt;            &lt;li&gt;分为顺序栈和链式栈&lt;br&gt;&lt;br&gt;          
      
    
    </summary>
    
      <category term="-栈和队列" scheme="hhttp://yoursite.com/categories/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    
    
      <category term="-栈和队列" scheme="hhttp://yoursite.com/tags/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>线性表例题</title>
    <link href="hhttp://yoursite.com/2018/05/15/%E6%9C%80%E8%BF%91%E7%9B%AE%E6%A0%87/"/>
    <id>hhttp://yoursite.com/2018/05/15/最近目标/</id>
    <published>2018-05-14T17:43:22.000Z</published>
    <updated>2018-05-22T16:52:27.086Z</updated>
    
    <content type="html"><![CDATA[<h1>线性表例题</h1><h2>翻转单链表</h2><p>递归版：</p><pre><code>LNode* turn(LNode *H){    if(H-&gt;next == NULL &amp;&amp; H == NULL)        return H;    LNode *newH = turn(H-&gt;next);    H-&gt;next-&gt;next = H;    H-&gt;next = NULL;    return newH;}</code></pre><h2>元素二分</h2><p>有一个顺序表L，其元素为整形数据，设计一个算法，将L中所有小于表头元素的整数放在前半部分，大于表头元素的整数放在后半部分。</p><p>本题的解决方法为：先将L的第一个元素存于变量temp中，然后定义两个整型变量<strong>i</strong>和<strong>j</strong>。<strong>i</strong>从左往右扫描，<strong>j</strong>从右往左扫描，边扫描边交换；</p><pre><code>void move(SqList &amp;L){    int temp;    int i = 0, j = L.length -  1;    temp = L.data[0];    while(i &lt; j)    {        while(i &lt; j &amp;&amp; L.data[j] &gt; temp)                —-j;        if(i &lt; j)        {            L.data[i] = L.data[j];            ++i;        }        while(i &lt; j &amp;&amp; L.data[i] &lt; temp)            ++i;        if(i &lt; j)        {            L.data[i] = L.data[j];            —-j;                }    }     L.data[i] = temp;}</code></pre><p><strong>注意</strong>：每走一步都要判断<strong>i</strong>是否小于<strong>j</strong>。</p><h2>倒数第k个结点</h2><p>假设该链表只给出了头指针head。在不改变链表的前提下，请设计一个尽可能高效的算法，查找链表中倒数第k（k为正整数）个结点上的节点。若查找成功，算法输出该结点的data值，并返回1；否则，只返回0。</p><pre><code>int findelem(LNode* head, int k){    p1 = head-&gt;next;    p = head;    i = 1;    while(p != NULL){        p1 = p-&gt;next;        ++i;        if(i &gt; k)            p = p-&gt;next;    }    if(p = head)        return 0;    else{        cout&lt;&lt;p-&gt;data;        return 1;    }}</code></pre><h2>左移p个位置</h2><p>设将n（n&gt;1）个整数存放到一维数组R中，设计一个算法，将R中的序列循环左移p（0&lt;p&lt;n）个位置。</p><pre><code>void Reverse(int R[], int l, int r){    int i,j;    int temp;    for(i = 1, j = r; i &lt; j; ++i, --j){        temp = R[i];        R[i] = R[j];        R[j] = temp;    }}void RCR(int R[], int n, int p){    if(p &lt;= 0 || p &gt;= n)        cout&lt;&lt;&quot;ERROR&quot;&lt;&lt;endl;    else{        Reverse(R, 0, p - 1);        Reverse(R, p, n-1);        Reverse(R, 0, n-1);    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;线性表例题&lt;/h1&gt;

&lt;h2&gt;翻转单链表&lt;/h2&gt;

&lt;p&gt;递归版：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LNode* turn(LNode *H){
    if(H-&amp;gt;next == NULL &amp;amp;&amp;amp; H == NULL)
        retur
      
    
    </summary>
    
      <category term="-数据结构" scheme="hhttp://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="-线性表" scheme="hhttp://yoursite.com/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>《社交网络》</title>
    <link href="hhttp://yoursite.com/2018/02/11/the-social-network/"/>
    <id>hhttp://yoursite.com/2018/02/11/the-social-network/</id>
    <published>2018-02-11T15:49:04.167Z</published>
    <updated>2018-05-22T16:52:05.916Z</updated>
    
    <content type="html"><![CDATA[<p>我知道《社交网络》这部电影是因为一次搜索。2011年的一天我在《读者》杂志上看到一张名字貌似叫社交网络中的自拍还是什么的，我觉得挺有意思的就去搜索了一下，发现《社交网络》是一部电影，和那张图片没有任何关系。然后我就去看了一下这部看上去还很有意思的电影。我记得当时还是用快播看的，现在快播的王欣都已经出狱了。</p><p>我还清晰地记得我第一次看这部电影的感觉，那就是Coooooool。原来世界上还有这么cool的事情，从一开始Zuckburg回宿舍开始hacking，到在艺术课上写theFacebook的code，一切都是这么有趣这么酷。看完我就觉得，以后要成为像他那样的人，用技术改变世界，创造价值（其实就是做大事挣大钱）。从那以后，这部电影就成为我身上的烙印，那以后的七年，我的很多做法想法都有那部电影的影子。</p><p>后来，我又看了大概十几遍《社交网络》。我都觉得这部电影有点像是我的行事准则了，以至于每次我意志不坚定，不知道何去何从的时候，都会打开这部电影。不过有趣的是，这么几年以来我并没有成为像Zuckburg那样的Coder，甚至连一个Coder都算不上。原因也很明显呀，那就是懒。我记得初三毕业那个暑假我就想学Java和C，但是到现在我也没学Java（C是大学以后学的），或者说Java只学了一点点东西，比如printf。。。</p><p>今天，我又看了一遍《社交网络》，我希望我能真正去做一些cool的事情。</p><blockquote><p>—— A million dollars isn’t cool. You know what’s cool？<br>—— You？<br>—— A billion dollars.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我知道《社交网络》这部电影是因为一次搜索。2011年的一天我在《读者》杂志上看到一张名字貌似叫社交网络中的自拍还是什么的，我觉得挺有意思的就去搜索了一下，发现《社交网络》是一部电影，和那张图片没有任何关系。然后我就去看了一下这部看上去还很有意思的电影。我记得当时还是用快播看
      
    
    </summary>
    
      <category term="-碎碎念" scheme="hhttp://yoursite.com/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="-碎碎念 -生活" scheme="hhttp://yoursite.com/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5-%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="hhttp://yoursite.com/2018/02/08/hello-world/"/>
    <id>hhttp://yoursite.com/2018/02/08/hello-world/</id>
    <published>2018-02-08T14:54:27.023Z</published>
    <updated>2018-02-08T17:17:14.376Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><pre><code>忙活一晚上终于把网站建好了，希望这次能好好写点东西。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;忙活一晚上终于把网站建好了，希望这次能好好写点东西。
      
    
    </summary>
    
      <category term="碎碎念" scheme="hhttp://yoursite.com/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="-碎碎念" scheme="hhttp://yoursite.com/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
</feed>
